name: Build and Push Docker Images

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    # Allow manual triggering

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend
  FRONTEND_MINIMAL_IMAGE_NAME: ${{ github.repository }}-frontend-minimal
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  # Add environment variable to ignore TypeScript errors
  TSC_COMPILE_ON_ERROR: true

jobs:
  verify-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          # Remove cache configuration since lock files are not at the root
          
      - name: Verify frontend dependencies
        working-directory: ./frontend
        run: npm install
      
      - name: Verify frontend-minimal dependencies
        working-directory: ./frontend-minimal
        run: npm install
          
      - name: Verify backend dependencies
        working-directory: ./backend
        run: npm install

  build-and-push:
    needs: verify-dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Docker Buildx for efficient caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker
      - name: Extract Docker metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract Docker metadata for frontend-minimal
        id: meta-frontend-minimal
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_MINIMAL_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract Docker metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      # Build and push frontend image with build args and caching
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            TSC_COMPILE_ON_ERROR=true

      # Build and push frontend-minimal image with build args and caching
      - name: Build and push Frontend Minimal Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend-minimal
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-frontend-minimal.outputs.tags }}
          labels: ${{ steps.meta-frontend-minimal.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            TSC_COMPILE_ON_ERROR=true

      # Build and push backend image with build args and caching
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production 